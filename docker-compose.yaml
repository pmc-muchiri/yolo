  services:
    # DATABASE Container
    pmc-yolo-database:
      build:
        context: ./database          
        dockerfile: Dockerfile
        args:
          buildversion: 1.0.0      
      image: pmcmuchiri/pmc-yolo-database:v1.0.0 #tag the image to push to docker hub
      restart: always
      environment:
        MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
        MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
        MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      container_name: pmc-yolo-database
      
      ports:
        - "27017:27017"
      volumes:
        - mongo-database:/data/db
      env_file:
        - .env
      
      networks:
        - backend-db-net

      healthcheck:
        test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
        interval: 10s
        retries: 5

    # BACKEND Container
    pmc-yolo-backend:
      image: pmcmuchiri/pmc-yolo-backend:v1.0.0
      build: 
        context: ./backend
        dockerfile: Dockerfile
        args:
          buildversion: v1.0.0

      # interactive mode like docker run -it
      stdin_open: true
      tty: true
      restart: always
      container_name: pmc-yolo-backend
      env_file:
        - .env                

      depends_on:             
        - pmc-yolo-database
      ports:
        - "5000:5000"
      networks:
        - backend-db-net
        - frontend-backend-net

      volumes:
        - backend-logs:/usr/src/app/logs 

    # FRONTEND Container
    pmc-yolo-client:
      image: pmcmuchiri/pmc-yolo-client:v1.0.0
      build: 
        context: ./client
        dockerfile: Dockerfile
        args:
          buildversion: v1.0.0

      # interactive mode like docker run -it
      stdin_open: true
      tty: true
      restart: always
      container_name: pmc-yolo-client
      depends_on:             
        pmc-yolo-database:
          condition: service_healthy
      ports:
        - "8080:80"
      networks:
        - frontend-backend-net
      
      volumes:
        - client-logs:/usr/src/app/logs


  volumes:
    mongo-database:
      driver: local
    client-logs:
      driver: local
    backend-logs:
      driver: local

  networks:
    backend-db-net:
      driver: bridge
    frontend-backend-net:
      driver: bridge

